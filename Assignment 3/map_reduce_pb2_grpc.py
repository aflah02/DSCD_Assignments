# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import map_reduce_pb2 as map__reduce__pb2


class MasterServiceStub(object):
    """The master service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMapperData = channel.unary_unary(
                '/MasterService/SendMapperData',
                request_serializer=map__reduce__pb2.MapDataRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.MapDataResponse.FromString,
                )
        self.InvokeReducers = channel.unary_unary(
                '/MasterService/InvokeReducers',
                request_serializer=map__reduce__pb2.ReduceDataRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.ReduceDataResponse.FromString,
                )


class MasterServiceServicer(object):
    """The master service definition.
    """

    def SendMapperData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InvokeReducers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMapperData': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMapperData,
                    request_deserializer=map__reduce__pb2.MapDataRequest.FromString,
                    response_serializer=map__reduce__pb2.MapDataResponse.SerializeToString,
            ),
            'InvokeReducers': grpc.unary_unary_rpc_method_handler(
                    servicer.InvokeReducers,
                    request_deserializer=map__reduce__pb2.ReduceDataRequest.FromString,
                    response_serializer=map__reduce__pb2.ReduceDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MasterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterService(object):
    """The master service definition.
    """

    @staticmethod
    def SendMapperData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterService/SendMapperData',
            map__reduce__pb2.MapDataRequest.SerializeToString,
            map__reduce__pb2.MapDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InvokeReducers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterService/InvokeReducers',
            map__reduce__pb2.ReduceDataRequest.SerializeToString,
            map__reduce__pb2.ReduceDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MapperServiceStub(object):
    """The mapper service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendDataPoint = channel.unary_unary(
                '/MapperService/SendDataPoint',
                request_serializer=map__reduce__pb2.DataPointRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.DataPointResponse.FromString,
                )


class MapperServiceServicer(object):
    """The mapper service definition.
    """

    def SendDataPoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendDataPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.SendDataPoint,
                    request_deserializer=map__reduce__pb2.DataPointRequest.FromString,
                    response_serializer=map__reduce__pb2.DataPointResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MapperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapperService(object):
    """The mapper service definition.
    """

    @staticmethod
    def SendDataPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapperService/SendDataPoint',
            map__reduce__pb2.DataPointRequest.SerializeToString,
            map__reduce__pb2.DataPointResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReducerServiceStub(object):
    """The reducer service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendPartition = channel.unary_unary(
                '/ReducerService/SendPartition',
                request_serializer=map__reduce__pb2.PartitionRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.PartitionResponse.FromString,
                )


class ReducerServiceServicer(object):
    """The reducer service definition.
    """

    def SendPartition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReducerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendPartition': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPartition,
                    request_deserializer=map__reduce__pb2.PartitionRequest.FromString,
                    response_serializer=map__reduce__pb2.PartitionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ReducerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReducerService(object):
    """The reducer service definition.
    """

    @staticmethod
    def SendPartition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReducerService/SendPartition',
            map__reduce__pb2.PartitionRequest.SerializeToString,
            map__reduce__pb2.PartitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
